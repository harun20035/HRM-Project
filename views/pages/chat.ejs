<%- include('../partials/header', { title: 'Chat' }); %>

<div class="container mt-5">
    <h1 class="text-center mb-4">Chat</h1>
    <div class="row">
        <div class="col-md-4">
            <div class="list-group" id="chatList">
                <!-- Chat partners will be dynamically loaded here -->
            </div>
            <form id="newChatForm" class="mt-4">
                <div class="input-group mb-3">
                    <input type="text" id="newChatUserId" class="form-control" placeholder="User ID for new chat" required>
                    <div class="input-group-append">
                        <button class="btn btn-outline-secondary" type="submit">Start New Chat</button>
                    </div>
                </div>
            </form>
        </div>
        <div class="col-md-8">
            <div id="chatBox" class="border rounded p-3" style="height: 500px; overflow-y: scroll; background-color: #f9f9f9;">
                <p class="text-center text-muted">Select a chat to start messaging.</p>
            </div>
            <form id="chatForm" class="mt-4">
                <div class="input-group">
                    <input type="hidden" id="selectedUserId" value=""> <!-- Hidden field to store selected user ID -->
                    <input type="text" id="messageText" class="form-control me-2" placeholder="Type your message here..." required>
                    <div class="input-group-append">
                        <button class="btn btn-primary" type="submit">Send</button>
                    </div>
                </div>
            </form>
            <button class="btn btn-danger btn-sm mt-3" id="deleteChatBtn" style="display: none;">Delete Chat</button>
        </div>
    </div>
</div>

<script>
    const chatBox = document.getElementById('chatBox');
    const chatForm = document.getElementById('chatForm');
    const messageText = document.getElementById('messageText');
    const newChatForm = document.getElementById('newChatForm');
    const newChatUserId = document.getElementById('newChatUserId');
    const selectedUserId = document.getElementById('selectedUserId');
    const deleteChatBtn = document.getElementById('deleteChatBtn');

    chatBox.innerHTML = '<p class="text-center text-muted">Select a chat to start messaging.</p>';

    chatForm.addEventListener('submit', function(event) {
        event.preventDefault();
        if (!selectedUserId.value) {
            alert('Please select a chat partner before sending a message.');
            return;
        }
        const text = messageText.value;
        fetch('/api/chat/send', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ recipientId: selectedUserId.value, text })
        })
        .then(response => response.json())
        .then(data => {
            if (data.message) {
                const newMessage = `
                    <div class="message mb-3">
                        <strong>You:</strong>
                        <p class="d-inline-block bg-light p-2 rounded">${text}</p>
                        <small class="text-muted d-block text-right">Now</small>
                    </div>
                `;
                chatBox.innerHTML += newMessage;
                messageText.value = '';
                chatBox.scrollTop = chatBox.scrollHeight;
            } else {
                alert('Error sending message: ' + data.error);
            }
        })
        .catch(error => console.error('Error:', error));
    });

    newChatForm.addEventListener('submit', function(event) {
        event.preventDefault();
        const userId = newChatUserId.value;

        // Check if chat already exists
        if (document.querySelector(`#chatList .list-group-item[data-user-id="${userId}"]`)) {
            alert('Chat with this user already exists.');
            return;
        }

        fetch('/api/chat/start', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ recipientId: userId })
        })
        .then(response => response.json())
        .then(data => {
            if (data.message === 'Conversation started successfully') {
                alert('Conversation successfully started');
                selectedUserId.value = userId;
                localStorage.setItem('selectedPartnerId', userId);
                loadChatPartners();

                // Display initial chat message
                chatBox.innerHTML = `
                    <div class="message mb-3">
                        <strong>System:</strong>
                        <p class="d-inline-block bg-light p-2 rounded">You have started a new chat with this user.</p>
                        <small class="text-muted d-block text-right">Now</small>
                    </div>
                `;
            } else {
                alert('Failed to start conversation: ' + data.message);
            }
        })
        .catch(error => alert('Failed to start conversation: ' + error.message));
    });

    deleteChatBtn.addEventListener('click', function () {
        if (!selectedUserId.value) {
            alert('Please select a chat to delete.');
            return;
        }

        const confirmDelete = confirm('Are you sure you want to delete this chat?');
        if (!confirmDelete) return;

        fetch(`/api/chat/delete/${selectedUserId.value}`, {
            method: 'DELETE',
            headers: { 'Content-Type': 'application/json' },
        })
        .then(response => response.json())
        .then(data => {
            if (data.message) {
                alert('Chat deleted successfully.');
                localStorage.removeItem('selectedPartnerId');
                selectedUserId.value = '';
                chatBox.innerHTML = '<p class="text-center text-muted">Select a chat to start messaging.</p>';
                loadChatPartners();
                deleteChatBtn.style.display = 'none';
            } else {
                alert('Error deleting chat: ' + data.error);
            }
        })
        .catch(error => console.error('Error:', error));
    });

    function loadChatPartners() {
        fetch('/api/chat/partners', {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' }
        })
        .then(response => response.json())
        .then(partners => {
            const chatList = document.getElementById('chatList');
            chatList.innerHTML = '';
            partners.forEach(partner => {
                const partnerItem = document.createElement('a');
                partnerItem.classList.add('list-group-item', 'list-group-item-action');
                partnerItem.setAttribute('href', 'javascript:void(0);');
                partnerItem.setAttribute('data-user-id', partner.user_id);
                partnerItem.innerText = `${partner.first_name} ${partner.last_name}`;
                partnerItem.onclick = function() {
                    selectChat(partner.user_id);
                };
                chatList.appendChild(partnerItem);
            });
        });
    }

    function selectChat(partnerId) {
        selectedUserId.value = partnerId;
        localStorage.setItem('selectedPartnerId', partnerId);
        deleteChatBtn.style.display = 'block'; // Show delete button
        loadMessages(partnerId);
    }

    function loadMessages(userId) {
        fetch(`/api/chat/messages/${userId}`, {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' }
        })
        .then(response => response.json())
        .then(messages => {
            chatBox.innerHTML = '';
            messages.forEach(message => {
                const senderName = `${message.sender_first_name} ${message.sender_last_name}`;
                const messageElement = `
                    <div class="message mb-3">
                        <strong>${senderName}:</strong>
                        <p class="d-inline-block bg-light p-2 rounded">${message.text}</p>
                        <small class="text-muted d-block text-right">${new Date(message.created_at).toLocaleTimeString()}</small>
                    </div>
                `;
                chatBox.innerHTML += messageElement;
            });
            chatBox.scrollTop = chatBox.scrollHeight;
        })
        .catch(error => console.error('Error loading messages:', error));
    }

    window.onload = function () {
        loadChatPartners();
        const previousPartnerId = localStorage.getItem('selectedPartnerId');
        if (previousPartnerId) {
            selectChat(previousPartnerId);
        } else {
            localStorage.removeItem('selectedPartnerId');
            chatBox.innerHTML = '<p class="text-center text-muted">Select a chat to start messaging.</p>';
        }
    };
</script>

<%- include('../partials/footer'); %>
